
Beispielcode, der Ihnen zeigt, wie Sie ScottPlot verwenden können, um ein Diagramm mit automatisch angepassten Achsen und verschiebbarem Bereich zu erstellen:

https://chartio.com/learn/charts/what-is-a-scatter-plot/


// Importieren Sie die ScottPlot-Bibliothek
using ScottPlot;

// Erstellen Sie ein neues Plot-Objekt
var plt = new Plot(600, 400);

// Fügen Sie alle Datenpunkte als Streupunkte hinzu
plt.AddScatter(Data[0], Data[1]);

// Passen Sie die Achsen automatisch an die Daten an
plt.AxisAuto();

// Speichern Sie den aktuellen Bereich der Achsen
double[] axisLimits = plt.GetAxisLimits();

// Erstellen Sie eine Funktion, die den Bereich der Achsen verschiebt
void UpdatePlot(double dx)
{
    // Verschieben Sie den Bereich der Achsen
    plt.AxisSet(axisLimits[0] + dx, axisLimits[1] + dx, axisLimits[2], axisLimits[3]);

    // Aktualisieren Sie das Diagramm
    plt.Update();
}

// Erstellen Sie ein neues Formular
var form = new Form();

// Fügen Sie das Diagramm zum Formular hinzu
form.Controls.Add(plt.GetBitmap());

// Erstellen Sie eine Schaltfläche zum Verschieben des Bereichs der Achsen
var button = new Button();
button.Text = "Verschieben";
button.Click += (s, e) => UpdatePlot(10);
form.Controls.Add(button);

// Zeigen Sie das Formular an
form.ShowDialog();




_________________________________


Um nur einen bestimmten Bereich von Datenpunkten aus Ihrem Array anzuzeigen, können Sie die Funktion AddScatter von ScottPlot verwenden und die Datenpunkte auswählen, 
die Sie anzeigen möchten. Hier ist ein Beispielcode, der Ihnen helfen kann, dies zu erreichen:
// Importieren Sie die ScottPlot-Bibliothek
using ScottPlot;

// Erstellen Sie ein neues Plot-Objekt
var plt = new Plot(600, 400);

// Wählen Sie den Bereich der Datenpunkte aus, den Sie anzeigen möchten
double[] xs = new double[1000];
double[] ys = new double[1000];
Array.Copy(Data[0], 0, xs, 0, 1000);
Array.Copy(Data[1], 0, ys, 0, 1000);

// Fügen Sie die ausgewählten Datenpunkte als Streupunkte hinzu
plt.AddScatter(xs, ys);

// Speichern Sie das Diagramm als Bild
plt.SaveFig("scatter.png");


___________________________________________


uszuwählen 1.

Um den Bereich der angezeigten Datenpunkte zu verschieben, können Sie die Funktionen AxisAuto, AxisZoom, AxisPan und AxisSet von ScottPlot verwenden 
Die Funktion AxisAuto passt die Achsen automatisch an die Daten an, während die Funktion AxisZoom den Zoomfaktor der Achsen ändert. 
Die Funktion AxisPan verschiebt den Bereich der angezeigten Datenpunkte, während die Funktion AxisSet die Achsen manuell festlegt 
1. Hier ist ein Beispielcode, der Ihnen helfen kann, den Bereich der angezeigten Datenpunkte zu verschieben:

// Importieren Sie die ScottPlot-Bibliothek
using ScottPlot;

// Erstellen Sie ein neues Plot-Objekt
var plt = new Plot(600, 400);

// Fügen Sie alle Datenpunkte als Streupunkte hinzu
plt.AddScatter(Data[0], Data[1]);

// Passen Sie die Achsen automatisch an die Daten an
plt.AxisAuto();

// Zoomen Sie auf den Bereich der ersten 1000 Datenpunkte
plt.AxisZoom(0, 1000, -10, 10);

// Verschieben Sie den Bereich der angezeigten Datenpunkte
plt.AxisPan(100, 0);

// Speichern Sie das Diagramm als Bild
plt.SaveFig("scatter.png");



___________________________________________________



// Importieren Sie die ScottPlot-Bibliothek
using ScottPlot;

// Erstellen Sie ein neues Plot-Objekt
var plt = new Plot(600, 400);

// Fügen Sie die Daten als Streupunkte hinzu
double[] xs = { 1, 2, 3, 4, 5 };
double[] ys = { 1, 4, 9, 16, 25 };
plt.AddScatter(xs, ys);

// Fügen Sie die Daten als Error Bars hinzu
double[] yErr = { 1, 2, 3, 4, 5 };
plt.AddErrorBars(xs, ys, yErr);

// Fügen Sie die Daten als Histogramm hinzu
double[] data = { 1, 2, 3, 4, 5 };
plt.AddHistogram(data);

// Speichern Sie das Diagramm als Bild
plt.SaveFig("plot.png");

__________________________________


// Importieren Sie die FftSharp-Bibliothek
using FftSharp;

// Erstellen Sie ein neues Plot-Objekt
var plt = new Plot(600, 400);

// Fügen Sie die Daten als Signal hinzu
double[] data = { 1, 2, 3, 4, 5 };
plt.AddSignal(data);

// Berechnen Sie die FFT der Daten
double[] fft = FftSharp.Transform.FFTmagnitude(data);

// Fügen Sie die FFT als Signal hinzu
plt.AddSignal(fft);

// Speichern Sie das Diagramm als Bild
plt.SaveFig("fourier.png");



    private void StartSimulation_button1_Click_1(object sender, EventArgs e)
    {
        Simulation simulation = new();
        modelSimulation = simulation;
        Form? grdForm = Application.OpenForms["GridForm"];
        grdForm?.Close();
        GridForm gridForm = new(modelSimulation, AppSettings.Config.GridMaxX, AppSettings.Config.GridMaxY);
        gridForm.Show();
        this.Focus();
        modelSimulation.StartIteration();
    }



https://blog.idera.com/database-tools/converting-powershell-to-batch
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7357531/

public class PersonInvalidIndexException : Exception
{
    public PersonInvalidIndexException() 
    { 
    }
    public PersonInvalidIndexException(string StringToPass) : base(
        (String.Format("PersonMoveRateFrom and PersonMoveRateTo must have the same number of entries.\r\n" +
        "PersonMoveRateFrom values must be smaller as the related PersonMoveRateTo value!\r\n\r\n" +
        "PeronMoveRates will be reset to the default values!\r\n\r\n" +
        "Please enter the desired correct values in APP-Settings: Category -> Move Rate Person\r\n{0}", StringToPass)))
    {
        AppSettings.Config.PersonMoveRate.DoubleSeriesFrom = new DoubleSeries([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
        AppSettings.Config.PersonMoveRate.DoubleSeriesTo = new DoubleSeries([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
    }
    public PersonInvalidIndexException(string message, Exception inner) : base(message, inner) { }
}

   else
   {
       throw new PersonInvalidIndexException("");
   }


double randomProbability; // in percent, can be a decimal between 0 and 100

// randomProbability meaning:
// 0 = never do activity
// 25.5 = from 100 activities, do activity 25.5 times
// 50.9 = from 100 activities, do activity 50.9 times
// 90.95 = from 100 activities, do activity 90.95 times
// 100 = always do activity

Random random = new Random();
double randomNumber = random.NextDouble() * 100;

if (randomNumber <= randomProbability)
{
    // do activity...
}




int randomProbability; // in percent, can be an integer between 0 and 100

// randomProbability meaning:
// 0 = never do activity
// 25 = from 100 activities, do activity 25 times
// 50 = from 100 activities, do activity 50 times
// 75 = from 100 activities, do activity 75 times
// 100 = always do activity

Random random = new Random();
int randomNumber = random.Next(1, 101);

if (randomNumber <= randomProbability)
{
    // do activity...
}




 // Erstelle einen CsvWriter, um die Daten zu formatieren
    using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
    {
        // Schreibe die Spaltennamen in die erste Zeile
        csv.WriteField("X");
        for (int i = 0; i < plotData.Legend.Length; i++)
        {
            csv.WriteField(plotData.Legend[i].ToString()); // Schreibe den Namen der Plottable
        }
        csv.NextRecord();

// Erstelle ein zweidimensionales Array mit der gleichen Länge wie dein SignalPlot-Array
double[,] data = new double[signalPlot.Length, 2];

// Erstelle einen StreamWriter, um die CSV-Dateien zu schreiben
    // Schreibe die Spaltennamen in die erste Zeile
    writer.WriteLine("X,Y");

    // Iteriere über dein SignalPlot-Array
    for (int i = 0; i < signalPlot.Length; i++)
    {
        // Fülle das Array mit den X- und Y-Werten aus deinem SignalPlot-Array
        data[i, 0] = signalPlot[i].X; // X-Wert
        data[i, 1] = signalPlot[i].Y; // Y-Wert

        // Schreibe die X- und Y-Werte in die CSV-Datei, getrennt durch ein Komma
        writer.WriteLine($"{data[i, 0]},{data[i, 1]}");
    }
}


// Erstelle ein zweidimensionales Array mit der gleichen Länge wie dein SignalPlot-Array
double[,] data = new double[signalPlot.Length, 2];

// Erstelle einen StreamWriter, um die CSV-Dateien zu schreiben
using (var writer = new StreamWriter("signalPlot.csv"))
{
    // Schreibe die Spaltennamen in die erste Zeile
    writer.WriteLine("X,Y");

    // Iteriere über dein SignalPlot-Array
    for (int i = 0; i < signalPlot.Length; i++)
    {
        // Fülle das Array mit den X- und Y-Werten aus deinem SignalPlot-Array
        data[i, 0] = signalPlot[i].X; // X-Wert
        data[i, 1] = signalPlot[i].Y; // Y-Wert

        // Schreibe die X- und Y-Werte in die CSV-Datei, getrennt durch ein Komma
        writer.WriteLine($"{data[i, 0]},{data[i, 1]}");
    }
}



// Create a new serializer
var serializer = new SharpSerializer ();
// Set the append mode to property
serializer.AppendMode = AppendMode.Property;
// Serialize the window state to the existing file
serializer.Serialize (this.WindowState, "config.xml");




// This is the save button
XmlSerializer serializer = new XmlSerializer(typeof(FormWindowState));
using (StreamWriter writer = new StreamWriter("windowstate.xml"))
{
    serializer.Serialize(writer, this.WindowState);
}

// This is the retrieve (use it in the form load event for example)
XmlSerializer serializer = new XmlSerializer(typeof(FormWindowState));
using (StreamReader reader = new StreamReader("windowstate.xml"))
{
    this.WindowState = (FormWindowState)serializer.Deserialize(reader);
}



// Erstelle eine C#-Bibliotheksklasse, die eine threadsichere Warteschlange enthält
public class QueueManager
{
    // Erstelle eine private ConcurrentQueue<List<double>>
    private ConcurrentQueue<List<double>> queue = new ConcurrentQueue<List<double>> ();

    // Erstelle eine öffentliche Methode, um Listen in die Warteschlange einzureihen
    public void EnqueueList (List<double> values)
    {
        // Füge die Liste in die Warteschlange ein
        queue.Enqueue (values);
    }

    // Erstelle eine öffentliche Methode, um Listen aus der Warteschlange zu entnehmen
    public bool DequeueList (out List<double> values)
    {
        // Versuche, eine Liste aus der Warteschlange zu entnehmen
        return queue.TryDequeue (out values);
    }
}

// Erstelle eine C#-Bibliotheksklasse, die eine Instanz der QueueManager-Klasse enthält
public class LibraryClass
{
    // Erstelle eine öffentliche Eigenschaft, um die Instanz der QueueManager-Klasse zu speichern
    public QueueManager QueueManager { get; private set; }

    // Erstelle einen Konstruktor, der die Instanz der QueueManager-Klasse initialisiert
    public LibraryClass ()
    {
        QueueManager = new QueueManager ();
    }
}

// Erstelle ein Formular, das Werte in die Warteschlange einreiht
Form1 form1 = new Form1 ();
// Erstelle eine Instanz der LibraryClass
LibraryClass libraryClass = new LibraryClass ();
form1.button1.Click += (sender, e) =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Rufe die EnqueueList-Methode auf, um die Liste in die Warteschlange einzureihen
    libraryClass.QueueManager.EnqueueList (values);

    // Zeige die Werte im Formular an
    form1.label1.Text = "Enqueued: " + string.Join (", ", values);
};

// Erstelle ein Formular, das Werte aus der Warteschlange entnimmt
Form2 form2 = new Form2 ();
// Erstelle eine öffentliche Eigenschaft, um die Instanz der LibraryClass zu speichern
public LibraryClass LibraryClass { get; set; }
// Setze die LibraryClass-Eigenschaft von Form2 auf die Instanz der LibraryClass
form2.LibraryClass = libraryClass;
// Erstelle einen Timer, der alle 500 ms ausgelöst wird
Timer timer = new Timer () { Interval = 500 };
timer.Tick += (sender, e) =>
{
    // Entnehme einen Wert aus der Warteschlange
    List<double> values;
    bool success = form2.LibraryClass.QueueManager.DequeueList (out values); // Greife auf die Instanz der LibraryClass über eine Eigenschaft von Form2 zu

    // Zeige den Wert oder eine Fehlermeldung im Formular an
    if (success)
        form2.label1.Text = "Dequeued: " + string.Join (", ", values);
    else
        form2.label1.Text = "Queue is empty";
};
// Starte den Timer
timer.Start ();

// Zeige beide Formulare an
form1.Show ();
form2.Show ();







____________________________________________________________________________________


// Erstelle eine C#-Bibliotheksklasse, die eine threadsichere Warteschlange enthält
public class QueueManager
{
    // Erstelle eine private ConcurrentQueue<List<double>>
    private ConcurrentQueue<List<double>> queue = new ConcurrentQueue<List<double>> ();

    // Erstelle eine öffentliche Methode, um Listen in die Warteschlange einzureihen
    public void EnqueueList (List<double> values)
    {
        // Füge die Liste in die Warteschlange ein
        queue.Enqueue (values);
    }

    // Erstelle eine öffentliche Methode, um Listen aus der Warteschlange zu entnehmen
    public bool DequeueList (out List<double> values)
    {
        // Versuche, eine Liste aus der Warteschlange zu entnehmen
        return queue.TryDequeue (out values);
    }
}

// Erstelle eine C#-Bibliotheksklasse, die eine Instanz der QueueManager-Klasse enthält
public class LibraryClass
{
    // Erstelle eine öffentliche Eigenschaft, um die Instanz der QueueManager-Klasse zu speichern
    public QueueManager QueueManager { get; private set; }

    // Erstelle einen Konstruktor, der die Instanz der QueueManager-Klasse initialisiert
    public LibraryClass ()
    {
        QueueManager = new QueueManager ();
    }
}

// Erstelle ein Formular, das Werte in die Warteschlange einreiht
Form1 form1 = new Form1 ();
// Erstelle eine Instanz der LibraryClass
LibraryClass libraryClass = new LibraryClass ();
form1.button1.Click += (sender, e) =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Rufe die EnqueueList-Methode auf, um die Liste in die Warteschlange einzureihen
    libraryClass.QueueManager.EnqueueList (values);

    // Zeige die Werte im Formular an
    form1.label1.Text = "Enqueued: " + string.Join (", ", values);
};

// Erstelle ein Formular, das Werte aus der Warteschlange entnimmt
Form2 form2 = new Form2 ();
// Erstelle eine öffentliche Eigenschaft, um die Instanz der LibraryClass zu speichern
public LibraryClass LibraryClass { get; set; }
// Erstelle einen Task, der Werte aus der Warteschlange entnimmt
Task consumer = Task.Run (() =>
{
    // Entnehme alle Werte aus der Warteschlange
    List<double> values;
    bool success = form2.LibraryClass.QueueManager.DequeueList (out values); // Greife auf die Instanz der LibraryClass über eine Eigenschaft von Form2 zu

    // Zeige die Werte oder eine Fehlermeldung im Formular an
    if (success)
        form2.label1.Text = "Dequeued: " + string.Join (", ", values);
    else
        form2.label1.Text = "Queue is empty";
});

// Setze die LibraryClass-Eigenschaft von Form2 auf die Instanz der LibraryClass
form2.LibraryClass = libraryClass;

// Zeige beide Formulare an
form1.Show ();
form2.Show ();


___________________________________________________________________________________________________




_________________________________________________________________________________________





// Erstelle eine C#-Bibliotheksklasse, die eine threadsichere Warteschlange enthält
public class QueueManager
{
    // Erstelle eine private ConcurrentQueue<List<double>>
    private ConcurrentQueue<List<double>> queue = new ConcurrentQueue<List<double>> ();

    // Erstelle eine öffentliche Methode, um Listen in die Warteschlange einzureihen
    public void EnqueueList (List<double> values)
    {
        // Füge die Liste in die Warteschlange ein
        queue.Enqueue (values);
    }

    // Erstelle eine öffentliche Methode, um Listen aus der Warteschlange zu entnehmen
    public bool DequeueList (out List<double> values)
    {
        // Versuche, eine Liste aus der Warteschlange zu entnehmen
        return queue.TryDequeue (out values);
    }
}

// Erstelle eine C#-Bibliotheksklasse, die eine Instanz der QueueManager-Klasse enthält
public class LibraryClass
{
    // Erstelle eine öffentliche Eigenschaft, um die Instanz der QueueManager-Klasse zu speichern
    public QueueManager QueueManager { get; private set; }

    // Erstelle einen Konstruktor, der die Instanz der QueueManager-Klasse initialisiert
    public LibraryClass ()
    {
        QueueManager = new QueueManager ();
    }
}

// Erstelle ein Formular, das Werte in die Warteschlange einreiht
Form1 form1 = new Form1 ();
// Erstelle eine Instanz der LibraryClass
LibraryClass libraryClass = new LibraryClass ();
form1.button1.Click += (sender, e) =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Rufe die EnqueueList-Methode auf, um die Liste in die Warteschlange einzureihen
    libraryClass.QueueManager.EnqueueList (values);

    // Zeige die Werte im Formular an
    form1.label1.Text = "Enqueued: " + string.Join (", ", values);
};

// Erstelle ein Formular, das Werte aus der Warteschlange entnimmt
Form2 form2 = new Form2 ();
// Erstelle eine öffentliche Eigenschaft, um die Instanz der LibraryClass zu speichern
public LibraryClass LibraryClass { get; set; }
// Erstelle einen Task, der Werte aus der Warteschlange entnimmt
Task consumer = Task.Run (() =>
{
    // Entnehme alle Werte aus der Warteschlange
    List<double> values;
    bool success = form2.LibraryClass.QueueManager.DequeueList (out values); // Greife auf die Instanz der LibraryClass über eine Eigenschaft von Form2 zu

    // Zeige die Werte oder eine Fehlermeldung im Formular an
    if (success)
        form2.label1.Text = "Dequeued: " + string.Join (", ", values);
    else
        form2.label1.Text = "Queue is empty";
});

// Setze die LibraryClass-Eigenschaft von Form2 auf die Instanz der LibraryClass
form2.LibraryClass = libraryClass;

// Zeige beide Formulare an
form1.Show ();
form2.Show ();


______________________________________________




// Erstelle eine C#-Bibliotheksklasse, die eine threadsichere Warteschlange enthält
public class QueueManager
{
    // Erstelle eine private ConcurrentQueue<List<double>>
    private ConcurrentQueue<List<double>> queue = new ConcurrentQueue<List<double>> ();

    // Erstelle eine öffentliche Methode, um Listen in die Warteschlange einzureihen
    public void EnqueueList (List<double> values)
    {
        // Füge die Liste in die Warteschlange ein
        queue.Enqueue (values);
    }

    // Erstelle eine öffentliche Methode, um Listen aus der Warteschlange zu entnehmen
    public bool DequeueList (out List<double> values)
    {
        // Versuche, eine Liste aus der Warteschlange zu entnehmen
        return queue.TryDequeue (out values);
    }
}

// Erstelle eine C#-Bibliotheksklasse, die eine Instanz der QueueManager-Klasse enthält
public class LibraryClass
{
    // Erstelle eine öffentliche Eigenschaft, um die Instanz der QueueManager-Klasse zu speichern
    public QueueManager QueueManager { get; private set; }

    // Erstelle einen Konstruktor, der die Instanz der QueueManager-Klasse initialisiert
    public LibraryClass ()
    {
        QueueManager = new QueueManager ();
    }
}

// Erstelle ein Formular, das Werte in die Warteschlange einreiht
Form1 form1 = new Form1 ();
// Erstelle eine Instanz der LibraryClass
LibraryClass libraryClass = new LibraryClass ();
form1.button1.Click += (sender, e) =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Rufe die EnqueueList-Methode auf, um die Liste in die Warteschlange einzureihen
    libraryClass.QueueManager.EnqueueList (values);

    // Zeige die Werte im Formular an
    form1.label1.Text = "Enqueued: " + string.Join (", ", values);
};

// Erstelle ein Formular, das Werte aus der Warteschlange entnimmt
Form2 form2 = new Form2 ();
// Erstelle eine öffentliche Eigenschaft, um die Instanz der LibraryClass zu speichern
public LibraryClass LibraryClass { get; set; }
form2.button1.Click += (sender, e) =>
{
    // Rufe die DequeueList-Methode auf, um eine Liste aus der Warteschlange zu entnehmen
    List<double> values;
    bool success = form2.LibraryClass.QueueManager.DequeueList (out values); // Greife auf die Instanz der LibraryClass über eine Eigenschaft von Form2 zu

    // Zeige die Werte oder eine Fehlermeldung im Formular an
    if (success)
        form2.label1.Text = "Dequeued: " + string.Join (", ", values);
    else
        form2.label1.Text = "Queue is empty";
};

// Setze die LibraryClass-Eigenschaft von Form2 auf die Instanz der LibraryClass
form2.LibraryClass = libraryClass;

// Zeige beide Formulare an
form1.Show ();
form2.Show ();



__________________________________________





// Erstelle eine threadsichere Warteschlange
ConcurrentQueue<List<double>> queue = new ConcurrentQueue<List<double>> ();

// Erstelle einen Task, der zwei Listen mit 10 Werten in die Warteschlange einreiht
Task producer = Task.Run (() =>
{
    // Erzeuge zwei Listen von zufälligen Werten
    Random random = new Random ();
    List<double> values1 = new List<double> ();
    List<double> values2 = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value1 = random.NextDouble () * 100;
        double value2 = random.NextDouble () * 100;
        values1.Add (value1);
        values2.Add (value2);
    }

    // Füge die Listen in die Warteschlange ein
    queue.Enqueue (values1);
    queue.Enqueue (values2);

    // Zeige die Listen an
    Console.WriteLine ($"Enqueued: {string.Join (", ", values1)}");
    Console.WriteLine ($"Enqueued: {string.Join (", ", values2)}");
});

// Erstelle einen Task, der zwei Listen mit 10 Werten aus der Warteschlange entnimmt
Task consumer = Task.Run (() =>
{
    // Warte, bis der Producer fertig ist
    producer.Wait ();
    // Entnehme die Listen aus der Warteschlange
    List<double> values1;
    List<double> values2;
    bool success1 = queue.TryDequeue (out values1);
    bool success2 = queue.TryDequeue (out values2);

    // Zeige die Listen oder eine Fehlermeldung an
    if (success1 && success2)
    {
        Console.WriteLine ($"Dequeued: {string.Join (", ", values1)}");
        Console.WriteLine ($"Dequeued: {string.Join (", ", values2)}");
    }
    else
    {
        Console.WriteLine ("Queue is empty");
    }
});

// Warte, bis beide Tasks fertig sind
Task.WaitAll (producer, consumer);





// Erstelle eine threadsichere Warteschlange
ConcurrentQueue<double> queue = new ConcurrentQueue<double> ();

// Erstelle ein Formular, das Werte in die Warteschlange einreiht
Form1 form1 = new Form1 ();
form1.button1.Click += (sender, e) =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Füge die Werte in die Warteschlange ein
    queue.EnqueueRange (values);

    // Zeige die Werte im Formular an
    form1.label1.Text = "Enqueued: " + string.Join (", ", values);
};

// Erstelle ein Formular, das Werte aus der Warteschlange entnimmt
Form2 form2 = new Form2 ();
form2.button1.Click += (sender, e) =>
{
    // Entnehme alle Werte aus der Warteschlange
    IEnumerable<double> values;
    bool success = queue.TryDequeueAll (out values);

    // Zeige die Werte oder eine Fehlermeldung im Formular an
    if (success)
        form2.label1.Text = "Dequeued: " + string.Join (", ", values);
    else
        form2.label1.Text = "Queue is empty";
};

// Zeige beide Formulare an
form1.Show ();
form2.Show ();







Queue mit double liste
// Erstelle eine threadsichere Warteschlange
ConcurrentQueue<double> queue = new ConcurrentQueue<double> ();

// Erstelle einen Task, der mehrere Werte in die Warteschlange einreiht
Task producer = Task.Run (() =>
{
    // Erzeuge eine Liste von zufälligen Werten
    Random random = new Random ();
    List<double> values = new List<double> ();
    for (int i = 0; i < 10; i++)
    {
        double value = random.NextDouble () * 100;
        values.Add (value);
    }

    // Füge die Werte in die Warteschlange ein
    queue.EnqueueRange (values);

    // Zeige die Werte an
    Console.WriteLine ($"Enqueued: {string.Join (", ", values)}");
});

// Erstelle einen Task, der mehrere Werte aus der Warteschlange entnimmt
Task consumer = Task.Run (() =>
{
    // Warte, bis der Producer fertig ist
    producer.Wait ();
    // Entnehme alle Werte aus der Warteschlange
    IEnumerable<double> values;
    bool success = queue.TryDequeueAll (out values);

    // Zeige die Werte oder eine Fehlermeldung an
    if (success)
        Console.WriteLine ($"Dequeued: {string.Join (", ", values)}");
    else
        Console.WriteLine ("Queue is empty");
});

// Warte, bis beide Tasks fertig sind
Task.WaitAll (producer, consumer);





// Erstelle einen neuen Plot
var plt = new ScottPlot.Plot (600, 400);

// Füge vier Signale mit unterschiedlichen Daten hinzu
var sig1 = plt.AddSignal (ScottPlot.DataGen.Sin (51, mult: 1));
var sig2 = plt.AddSignal (ScottPlot.DataGen.Cos (51, mult: 10));
var sig3 = plt.AddSignal (ScottPlot.DataGen.Sin (51, mult: 100));
var sig4 = plt.AddSignal (ScottPlot.DataGen.Cos (51, mult: 1000));

// Weise jedem Signal eine andere Achse zu
sig1.YAxisIndex = 0; // linke Achse
sig2.YAxisIndex = 1; // rechte Achse
sig3.YAxisIndex = 2; // zweite linke Achse
sig4.YAxisIndex = 3; // zweite rechte Achse

// Füge zwei zusätzliche Achsen hinzu
var yAxis2 = plt.AddAxis (ScottPlot.Renderable.Edge.Left, axisIndex: 2);
var yAxis3 = plt.AddAxis (ScottPlot.Renderable.Edge.Right, axisIndex: 3);

// Aktiviere die Ticks für alle Achsen
plt.YAxis.Ticks (true);
plt.YAxis2.Ticks (true);
yAxis2.Ticks (true);
yAxis3.Ticks (true);

// Setze die Achsenlimits für jede Achse individuell
plt.SetAxisLimits (yMin: -2, yMax: 2, yAxisIndex: 0);
plt.SetAxisLimits (yMin: -20, yMax: 20, yAxisIndex: 1);
plt.SetAxisLimits (yMin: -200, yMax: 200, yAxisIndex: 2);
plt.SetAxisLimits (yMin: -2000, yMax: 2000, yAxisIndex: 3);

// Speichere den Plot als Bild
plt.SaveFig ("multiAxis_example.png");





https://theoryofprogramming.wordpress.com/adjacency-list-in-c-sharp/

https://www.desultoryquest.com/blog/real-time-plotting-on-windows-using-opengl/
https://github.com/swharden/ADC-10-F103C

https://github.com/swharden/FtdiSharp
https://github.com/ScottPlot/ScottPlot/issues/2377
https://scottplot.net/demo/
https://github.com/prime167/DotNetStatics

https://github.com/gabrielgcma/InteractiveScottPlot


fastgraphics KarlPage FastGraphics c#
https://www.linkedin.com/pulse/fast-pixel-manipulation-c-forms-karl-page

https://github.com/accord-net/framework/wiki/Mathematics


https://github.com/Abc-Arbitrage/ZeroLog
-> no grabage collectipn

https://github.com/Tyrrrz/Onova

CSV Parser
https://www.joelverhagen.com/blog/2020/12/fastest-net-csv-parsers
https://github.com/leandromoh?tab=repositories
https://github.com/leandromoh/awesome-dotnet

AutoDiff
https://github.com/alexshtf/autodiff

GDI 
https://www.prasannavl.com/2016/10/introducing-winapi-graphics-with-direct3d-d2d1-gdi-opengl-and-skia/

This is not done in the traditional sense. To do this you would create a new surface, clear it to white and then draw the other bitmap on top (assuming the "blank" is transparent).

Some pseudo code:

// the bitmap to resize and fill
SKBitmap sourceBitmap = …;

// the desired image size
SKImageInfo info = new SKImageInfo(200, 200);

// create the surface
SKSurface surface = SKSurface.Create(info);

// get the canvas for drawing
SKCanvas canvas = surface.Canvas;

// draw the white background
canvas.Clear(SKColors.White);

// create a paint object so that drawing can happen at a higher resolution
SKPaint paint = new SKPaint {
    IsAntialias = true,
    FilterQuality = SKFilterQuality.High
};

// draw the source bitmap over the white
canvas.DrawBitmap(sourceBitmap, info.Rect, paint);

// create an image for saving/drawing
canvas.Flush();
SKImage finalImage = surface.Snapshot();

maui color
https://albi005.github.io/MaterialColorUtilities/
https://www.nuget.org/packages/MaterialColorUtilities.Maui/0.1.0

____________________________

App Settings Property Grid Demo

https://github.com/muhammadawais95/property-grid-demo
https://www.codeproject.com/Articles/27302/Custom-C-NET-Settings-Class
_____________________


private string GetCurrentPropertyDescription(string sPropertyName)
    {
      PropertyDescriptor oPropDescriptor = TypeDescriptor.GetProperties(m_da.Config.GetType())[sPropertyName];
      if (oPropDescriptor != null)
      {
        DescriptionAttribute oDescriptionAttr = (DescriptionAttribute)oPropDescriptor.Attributes[typeof(DescriptionAttribute)];
        if (oDescriptionAttr != null)
          return oDescriptionAttr.Description;
      }
      return null;
    }


private void pgConfig_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
    {
      GridItem giSelected = e.NewSelection;
      if ((giSelected != null) && (giSelected.PropertyDescriptor != null))
      {
        string sDescription = GetCurrentPropertyDescription(giSelected.PropertyDescriptor.Name);
        if ((sDescription != null) && (sDescription != giSelected.PropertyDescriptor.Description))
        {
          MethodInfo miSetStatusBox = pgConfig.GetType().GetMethod("SetStatusBox", BindingFlags.NonPublic | BindingFlags.Instance);
          if (miSetStatusBox != null)
            miSetStatusBox.Invoke(pgConfig, new object[] { giSelected.PropertyDescriptor.DisplayName, sDescription });
        }
      }
}


https://github.com/MatthewKing/DynamicDescriptors



         private List<AgeGroupTranslation> _ageGroupList = new()
         {
             //new(PersAgeGroupsYear._1_9, 0.5 ),
             //new(PersAgeGroupsYear._10_19, 0.5 )
         };
 public class AgeGroupTranslation
 {
     public AgeGroupTranslation(PersAgeGroupsYear ageGroup, double deathRateByAgeGroup)
     {
         //AgeGroupsYear = ageGroup;
         //DeathRateByAgeGroup = deathRateByAgeGroup;
         //_ageGroupList.Add(ageGroup, deathRateByAgeGroup);
     }
     private PersAgeGroupsYear AgeGroupsYear { get; set; }
     private double DeathRateByAgeGroup { get; set; }
 }


________________


    private static List<AgeGroupTranslation> _ageGroupList = new()
    {
        //new(PersAgeGroupsYear._1_9, 0.5 ),
    };
    public class AgeGroupTranslation
    {
        private AgeGroupTranslation(PersAgeGroupsYear ageGroup, double deathRateByAgeGroup)
        {
        }    
    }
    public void AddAgeGroupValue(AgeGroupTranslation AgeGroupValue)
    {
        _ageGroupList.Add(AgeGroupValue);
    }

____________________________

propertie description:
https://stackoverflow.com/questions/6220193/my-settings-and-descriptions-and-getting-them-into-a-propertygrid
[Description("Your custom description here")]



https://stackoverflow.com/questions/10079912/c-sharp-probability-and-random-numbers

int rand = random.Next(0,100)

if (rand < 25) //25%
{
    // Some event...
}

//other code
if (rand < 23) //23%
{
    // Some event...
}

double rand = random.NextDouble();
if(rand < .25)
{
...